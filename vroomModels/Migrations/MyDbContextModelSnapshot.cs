// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourNamespace.Data;

#nullable disable

namespace VROOM.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YourNamespace.Models.Address", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.HasKey("UserID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("YourNamespace.Models.BusinessOwner", b =>
                {
                    b.Property<int>("BusinessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessID"));

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BusinessID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("BusinessOwners");
                });

            modelBuilder.Entity("YourNamespace.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackID")
                        .HasColumnType("int");

                    b.Property<int>("FeedbackID1")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID1")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("FeedbackID1");

                    b.HasIndex("OrderID1");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("YourNamespace.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RiderID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("RiderID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("YourNamespace.Models.Issues", b =>
                {
                    b.Property<int>("IssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("RiderID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IssueID");

                    b.HasIndex("RiderID");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("YourNamespace.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("YourNamespace.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBreakable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiderID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("RiderID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("YourNamespace.Models.OrderRider", b =>
                {
                    b.Property<int>("OrderRiderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderRiderID"));

                    b.Property<int>("BusinessID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBreakable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("RiderID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Vehicle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("OrderRiderID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("RiderID");

                    b.ToTable("OrderRiders");
                });

            modelBuilder.Entity("YourNamespace.Models.OrderRoute", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("RouteID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID", "RouteID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("RouteID");

                    b.ToTable("OrderRoutes");
                });

            modelBuilder.Entity("YourNamespace.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("YourNamespace.Models.Rider", b =>
                {
                    b.Property<int>("RiderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiderID"));

                    b.Property<int>("BusinessID")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Vehicle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RiderID");

                    b.HasIndex("BusinessID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Riders");
                });

            modelBuilder.Entity("YourNamespace.Models.RiderAssignment", b =>
                {
                    b.Property<int>("RiderID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BusinessID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RiderID", "BusinessID");

                    b.HasIndex("BusinessID");

                    b.ToTable("RiderAssignments");
                });

            modelBuilder.Entity("YourNamespace.Models.Route", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SafetyIndex")
                        .HasColumnType("real");

                    b.Property<int>("ShipmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Waypoints")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RouteID");

                    b.HasIndex("ShipmentID")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("YourNamespace.Models.Shipment", b =>
                {
                    b.Property<int>("ShipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentID"));

                    b.Property<string>("Beginning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("End")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxConsecutiveDeliveries")
                        .HasColumnType("int");

                    b.Property<int>("RiderID")
                        .HasColumnType("int");

                    b.HasKey("ShipmentID");

                    b.HasIndex("RiderID");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("YourNamespace.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YourNamespace.Models.UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.HasKey("UserID", "Role");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("YourNamespace.Models.Address", b =>
                {
                    b.HasOne("YourNamespace.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("YourNamespace.Models.Address", "UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourNamespace.Models.BusinessOwner", b =>
                {
                    b.HasOne("YourNamespace.Models.User", "User")
                        .WithOne("BusinessOwner")
                        .HasForeignKey("YourNamespace.Models.BusinessOwner", "UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourNamespace.Models.Customer", b =>
                {
                    b.HasOne("YourNamespace.Models.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourNamespace.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourNamespace.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("YourNamespace.Models.Customer", "UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourNamespace.Models.Feedback", b =>
                {
                    b.HasOne("YourNamespace.Models.Customer", "Customer")
                        .WithMany("FeedbacksProvided")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourNamespace.Models.Rider", "Rider")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("YourNamespace.Models.Issues", b =>
                {
                    b.HasOne("YourNamespace.Models.Rider", "Rider")
                        .WithMany("Issues")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("YourNamespace.Models.Notification", b =>
                {
                    b.HasOne("YourNamespace.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourNamespace.Models.Order", b =>
                {
                    b.HasOne("YourNamespace.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourNamespace.Models.Rider", "Rider")
                        .WithMany("OrdersHandled")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("YourNamespace.Models.OrderRider", b =>
                {
                    b.HasOne("YourNamespace.Models.Order", "Order")
                        .WithOne("OrderRider")
                        .HasForeignKey("YourNamespace.Models.OrderRider", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourNamespace.Models.Rider", "Rider")
                        .WithMany("OrderRiders")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("YourNamespace.Models.OrderRoute", b =>
                {
                    b.HasOne("YourNamespace.Models.Order", "Order")
                        .WithOne("OrderRoute")
                        .HasForeignKey("YourNamespace.Models.OrderRoute", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourNamespace.Models.Route", "Route")
                        .WithMany("OrderRoutes")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("YourNamespace.Models.Payment", b =>
                {
                    b.HasOne("YourNamespace.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("YourNamespace.Models.Payment", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("YourNamespace.Models.Rider", b =>
                {
                    b.HasOne("YourNamespace.Models.BusinessOwner", "BusinessOwner")
                        .WithMany("Riders")
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourNamespace.Models.User", "User")
                        .WithOne("Rider")
                        .HasForeignKey("YourNamespace.Models.Rider", "UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessOwner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourNamespace.Models.RiderAssignment", b =>
                {
                    b.HasOne("YourNamespace.Models.BusinessOwner", "BusinessOwner")
                        .WithMany("RiderAssignments")
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourNamespace.Models.Rider", "Rider")
                        .WithMany("RiderAssignments")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessOwner");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("YourNamespace.Models.Route", b =>
                {
                    b.HasOne("YourNamespace.Models.Shipment", "Shipment")
                        .WithOne("Route")
                        .HasForeignKey("YourNamespace.Models.Route", "ShipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("YourNamespace.Models.Shipment", b =>
                {
                    b.HasOne("YourNamespace.Models.Rider", "Rider")
                        .WithMany("Shipments")
                        .HasForeignKey("RiderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("YourNamespace.Models.UserRole", b =>
                {
                    b.HasOne("YourNamespace.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourNamespace.Models.BusinessOwner", b =>
                {
                    b.Navigation("RiderAssignments");

                    b.Navigation("Riders");
                });

            modelBuilder.Entity("YourNamespace.Models.Customer", b =>
                {
                    b.Navigation("FeedbacksProvided");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("YourNamespace.Models.Order", b =>
                {
                    b.Navigation("OrderRider")
                        .IsRequired();

                    b.Navigation("OrderRoute")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("YourNamespace.Models.Rider", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Issues");

                    b.Navigation("OrderRiders");

                    b.Navigation("OrdersHandled");

                    b.Navigation("RiderAssignments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("YourNamespace.Models.Route", b =>
                {
                    b.Navigation("OrderRoutes");
                });

            modelBuilder.Entity("YourNamespace.Models.Shipment", b =>
                {
                    b.Navigation("Route")
                        .IsRequired();
                });

            modelBuilder.Entity("YourNamespace.Models.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BusinessOwner")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Rider")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
